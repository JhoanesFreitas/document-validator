plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}

def getLocalProperties() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties
}

def getFakeCpf() {
    return getLocalProperties().getProperty("gpr.fakeCpf")
}

def getFakeInvalidCpf() {
    return getLocalProperties().getProperty("gpr.fakeInvalidCpf")
}

def getIncompleteCpfNumber() {
    return getLocalProperties().getProperty("gpr.fakeIncompleteCpf")
}

def getFakeCnpj() {
    return getLocalProperties().getProperty("gpr.fakeCnpj")
}

def getFakeInvalidCnpj() {
    return getLocalProperties().getProperty("gpr.fakeInvalidCnpj")
}

def getIncompleteCnpjNumber() {
    return getLocalProperties().getProperty("gpr.fakeIncompleteCnpj")
}

def getFakeRg() {
    return getLocalProperties().getProperty("gpr.fakeRg")
}

def getFakeInvalidRg() {
    return getLocalProperties().getProperty("gpr.fakeInvalidRg")
}

def getIncompleteRgNumber() {
    return getLocalProperties().getProperty("gpr.fakeIncompleteRg")
}

android {
    namespace 'com.jhoanesfreitas.documentvalidator'
    compileSdk 33

    defaultConfig {
        minSdk 19
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        buildConfigField "String", "FAKE_CPF", "\"" + getFakeCpf() + "\""
        buildConfigField "String", "FAKE_INVALID_CPF", "\"" + getFakeInvalidCpf() + "\""
        buildConfigField "String", "FAKE_INCOMPLETE_CPF", "\"" + getIncompleteCpfNumber() + "\""

        buildConfigField "String", "FAKE_CNPJ", "\"" + getFakeCnpj() + "\""
        buildConfigField "String", "FAKE_INVALID_CNPJ", "\"" + getFakeInvalidCnpj() + "\""
        buildConfigField "String", "FAKE_INCOMPLETE_CNPJ", "\"" + getIncompleteCnpjNumber() + "\""

        buildConfigField "String", "FAKE_RG", "\"" + getFakeRg() + "\""
        buildConfigField "String", "FAKE_INVALID_RG", "\"" + getFakeInvalidRg() + "\""
        buildConfigField "String", "FAKE_INCOMPLETE_RG", "\"" + getIncompleteRgNumber() + "\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.10.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}